const express = require("express"); // –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ   –≤–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ Express.
const app = express(); // app ‚Äî —ç—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Express, –∫–æ—Ç–æ—Ä–æ–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET-–∑–∞–ø—Ä–æ—Å—ã –∫ –∫–æ—Ä–Ω—é / –∏ –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–º.
const bot = require("./bot"); // –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º  –±–æ—Ç–∞
const fs = require("fs"); //–ú–æ–¥—É–ª—å fs –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π
const subscribersFile = "./subscribers.json";

//–ü–æ–ø—Ç—ã–∫–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ PINCODE
const users = [
  //PIN=code rub text
  { id: 1, username: "user1", password: "password1" },
  { id: 2, username: "user2", password: "password2" },
];
//END PINCODE
let subscribers = new Set();
if (fs.existsSync(subscribersFile)) {
  const saved = JSON.parse(fs.readFileSync(subscribersFile));
  subscribers = new Set(saved);
}
function broadcastMessage(text) {
  subscribers.forEach((chatId) => {
    bot.telegram.sendMessage(chatId, text).catch(console.error);
  });
}

app.use(express.static("public")); //–¥–∏—Ä–µ–∫—Ç–∏–≤–∞ –≤ Express.js, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥–∫–ª—é—á–∞–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π middleware –¥–ª—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

app.post("/new-application", (req, res) => {
  const { address, data, time, passenger, message, email } = req.body;
  const text = `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞! üöÄ\n–ê–¥—Ä–µ—Å: ${address}\n–î–∞—Ç–∞: ${data} –í—Ä–µ–º—è: ${time}‚åö\n–ü–∞—Å–∞–∂–∏—Ä–æ–≤: ${passenger}\n–°–æ–æ–±—â–µ–Ω–∏–µ: ${message}üí≠\nEmail: ${email}`;

  broadcastMessage(text);

  res.json({ status: "OK", message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ" });
});

app.listen(3000, () => console.log("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:3000"));
